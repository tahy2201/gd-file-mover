/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5.1/samples
 */
apply plugin: 'java'

repositories {
  jcenter()
  mavenCentral()
}
configurations {
    invoker
}

dependencies {
  // Every function needs this dependency to get the Functions Framework API.
  implementation 'com.google.cloud.functions:functions-framework-api:1.0.4'

  // To run function locally using Functions Framework's local invoker
  invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.1.0'

  // https://mvnrepository.com/artifact/com.google.apis/google-api-services-drive
  implementation 'com.google.apis:google-api-services-drive:v3-rev197-1.25.0'

  implementation platform('com.google.cloud:libraries-bom:26.1.2') 
  // https://mvnrepository.com/artifact/com.google.cloud/google-cloud-storage
  implementation 'com.google.cloud:google-cloud-storage:2.11.3'

  // https://mvnrepository.com/artifact/com.google.code.gson/gson
  implementation 'com.google.code.gson:gson:2.9.1'
  
}

tasks.register("runFunction", JavaExec) {
  main = 'com.google.cloud.functions.invoker.runner.Invoker'
  environment 'GOOGLE_APPLICATION_CREDENTIALS', '--SERVICE_ACCOUNT_JSON_FILEPATH--'
  classpath(configurations.invoker)
  inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
  args(
    '--target', project.findProperty('run.functionTarget') ?: '',
    '--port', project.findProperty('run.port') ?: 8080
  )
  doFirst {
    args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
  }
}
